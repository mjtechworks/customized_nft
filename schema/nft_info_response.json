{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "NftInfoResponse",
  "type": "object",
  "properties": {
    "extension": {
      "description": "You can add any custom metadata here when you extend cw721-base",
      "anyOf": [
        {
          "$ref": "#/definitions/Metadata"
        },
        {
          "type": "null"
        }
      ]
    },
    "token_uri": {
      "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
      "type": [
        "string",
        "null"
      ]
    }
  },
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "collection": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "description": {
          "type": [
            "string",
            "null"
          ]
        },
        "external_link": {
          "type": [
            "string",
            "null"
          ]
        },
        "init_price": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "name": {
          "type": [
            "string",
            "null"
          ]
        },
        "num_nfts": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "num_real_repr": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "royalties": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Royalty"
          }
        }
      }
    },
    "Royalty": {
      "type": "object",
      "required": [
        "address",
        "royalty_rate"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "royalty_rate": {
          "$ref": "#/definitions/Decimal"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
